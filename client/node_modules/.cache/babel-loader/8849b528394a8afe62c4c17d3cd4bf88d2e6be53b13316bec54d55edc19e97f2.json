{"ast":null,"code":"var _jsxFileName = \"/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_SELECTED_WORDS = 4;\nconst getOrderIndex = (a, b) => {\n  if (a < b) {\n    return -1; // a comes first\n  }\n  if (a > b) {\n    return 1; // b comes first\n  }\n  return 0;\n};\nconst sortWordsByMostSelectedCategory = words => {\n  const sorted = words.sort((a, b) => {\n    return getOrderIndex(a.categoryId, b.categoryId);\n  });\n  console.log({\n    sorted\n  });\n};\nexport const GameBoardContext = /*#__PURE__*/createContext(null);\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords\n}) => {\n  _s();\n  const [words, setWords] = useState(inputWords || []);\n  const selectedWords = words.filter(({\n    isSelected\n  }) => isSelected);\n  const isIncompleteSelection = selectedWords.length < MAX_SELECTED_WORDS;\n  const toggleWordSelect = inputWord => {\n    const selectedWord = words.find(({\n      word\n    }) => word === inputWord);\n    if (!selectedWord) {\n      throw new Error(\"Selected word has to exist\");\n    }\n    const editedWord = {\n      ...selectedWord,\n      isSelected: isIncompleteSelection ? !selectedWord.isSelected : false\n    };\n    setWords(words.map(word => {\n      return word.word === selectedWord.word ? editedWord : word;\n    }));\n  };\n  const checkIsCorrectWords = () => {\n    // const arrangedSelectedWords = R.sortBy(R.prop(\"categoryId\"), selectedWords);\n    const sortedSelectedWords = sortWordsByMostSelectedCategory(selectedWords);\n    console.log(sortedSelectedWords);\n  };\n  return /*#__PURE__*/_jsxDEV(GameBoardContext.Provider, {\n    value: {\n      words,\n      setWords,\n      toggleWordSelect,\n      selectedWords,\n      isIncompleteSelection,\n      checkIsCorrectWords\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoardContextProvider, \"/ruRz87IU3gnnnTiBK9QsS+G+F8=\");\n_c = GameBoardContextProvider;\nexport const useGameBoardContext = () => {\n  _s2();\n  const context = useContext(GameBoardContext);\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n  return context;\n};\n_s2(useGameBoardContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameBoardContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","MAX_SELECTED_WORDS","getOrderIndex","a","b","sortWordsByMostSelectedCategory","words","sorted","sort","categoryId","console","log","GameBoardContext","GameBoardContextProvider","children","inputWords","_s","setWords","selectedWords","filter","isSelected","isIncompleteSelection","length","toggleWordSelect","inputWord","selectedWord","find","word","Error","editedWord","map","checkIsCorrectWords","sortedSelectedWords","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGameBoardContext","_s2","context","$RefreshReg$"],"sources":["/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx"],"sourcesContent":["import { ReactNode, createContext, useContext, useState } from \"react\";\nimport { IGameBoardWord } from \"../types\";\nimport * as R from \"ramda\";\n\nconst MAX_SELECTED_WORDS = 4 as const;\n\ninterface IContext {\n  words: IGameBoardWord[];\n  setWords: React.Dispatch<React.SetStateAction<IGameBoardWord[]>>;\n  toggleWordSelect: (word: string) => void;\n  selectedWords: IGameBoardWord[];\n  isIncompleteSelection: boolean;\n  checkIsCorrectWords: () => void;\n}\n\nconst getOrderIndex = (a: string, b: string) => {\n  if (a < b) {\n    return -1; // a comes first\n  }\n  if (a > b) {\n    return 1; // b comes first\n  }\n  return 0;\n};\n\nconst sortWordsByMostSelectedCategory = (words: IGameBoardWord[]) => {\n  const sorted = words.sort((a, b) => {\n    return getOrderIndex(a.categoryId, b.categoryId);\n  });\n\n  console.log({ sorted });\n};\n\nexport const GameBoardContext = createContext<IContext | null>(null);\n\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords,\n}: {\n  children: ReactNode;\n  inputWords: IGameBoardWord[] | null;\n}) => {\n  const [words, setWords] = useState<IGameBoardWord[]>(inputWords || []);\n\n  const selectedWords = words.filter(({ isSelected }) => isSelected);\n\n  const isIncompleteSelection = selectedWords.length < MAX_SELECTED_WORDS;\n\n  const toggleWordSelect = (inputWord: string) => {\n    const selectedWord = words.find(({ word }) => word === inputWord);\n\n    if (!selectedWord) {\n      throw new Error(\"Selected word has to exist\");\n    }\n\n    const editedWord: IGameBoardWord = {\n      ...selectedWord,\n      isSelected: isIncompleteSelection ? !selectedWord.isSelected : false,\n    };\n\n    setWords(\n      words.map((word) => {\n        return word.word === selectedWord.word ? editedWord : word;\n      })\n    );\n  };\n\n  const checkIsCorrectWords = () => {\n    // const arrangedSelectedWords = R.sortBy(R.prop(\"categoryId\"), selectedWords);\n    const sortedSelectedWords = sortWordsByMostSelectedCategory(selectedWords);\n\n    console.log(sortedSelectedWords);\n  };\n\n  return (\n    <GameBoardContext.Provider\n      value={{\n        words,\n        setWords,\n        toggleWordSelect,\n        selectedWords,\n        isIncompleteSelection,\n        checkIsCorrectWords,\n      }}\n    >\n      {children}\n    </GameBoardContext.Provider>\n  );\n};\n\nexport const useGameBoardContext = () => {\n  const context = useContext(GameBoardContext);\n\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}