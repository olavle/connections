{"ast":null,"code":"var _jsxFileName = \"/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { getUpdatedWordsList, groupWordsByCategory } from \"../lib/lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_SELECTED_WORDS = 4;\nconst MAX_TRIES = 3;\n// that's a bad name dont care rollin hard\nconst DEFAULT_WRONG_ANSWER_MESSAGE = {\n  visible: false,\n  correctAnswers: 0\n};\nexport const GameBoardContext = /*#__PURE__*/createContext(null);\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords\n}) => {\n  _s();\n  const [words, setWords] = useState(inputWords || []);\n  const [wrongAnswers, setWrongAnswers] = useState(1);\n  const [correctWords, setCorrectWords] = useState([]);\n  const [wrongAnswerMessage, setWrongAnswerMessage] = useState(DEFAULT_WRONG_ANSWER_MESSAGE);\n  const updateWords = (newWords, words) => {\n    const updatedWords = getUpdatedWordsList(newWords, words);\n    setWords(updatedWords);\n  };\n  const selectedWords = words.filter(({\n    isSelected\n  }) => isSelected);\n  const isIncompleteSelection = selectedWords.length < MAX_SELECTED_WORDS;\n  const toggleWordSelect = inputWord => {\n    const selectedWord = words.find(({\n      word\n    }) => word === inputWord);\n    if (!selectedWord) {\n      return;\n    }\n    if (selectedWord.isGuessedCorrect) {\n      return;\n    }\n    const updatedWord = {\n      ...selectedWord,\n      isSelected: isIncompleteSelection ? !selectedWord.isSelected : false\n    };\n    setWords(words.map(word => {\n      return word.word === selectedWord.word ? updatedWord : word;\n    }));\n  };\n  const handleCorrectAnswer = (selectedWords, allWords) => {\n    const restWords = allWords.filter(word => !word.isSelected);\n    const updatedCorrectWords = selectedWords.map(word => ({\n      ...word,\n      isGuessedCorrect: true,\n      isSelected: false\n    }));\n    setCorrectWords([...correctWords, ...updatedCorrectWords]);\n    setWords(restWords);\n  };\n\n  // could be made into a toast (not the bread)\n  const handleShowErrorMessage = mostGuessedCategoryWords => {\n    setWrongAnswerMessage({\n      visible: true,\n      correctAnswers: mostGuessedCategoryWords.length\n    });\n    setTimeout(() => {\n      setWrongAnswerMessage(DEFAULT_WRONG_ANSWER_MESSAGE);\n    }, 5000);\n  };\n  const handleWrongAnswer = groupedWords => {\n    setWrongAnswers(wrongAnswers + 1);\n    handleShowErrorMessage(groupedWords[0]);\n  };\n  const checkIsCorrectWords = () => {\n    if (selectedWords.length < 4) {\n      return;\n    }\n    // maybe add the sorting to separate function\n    // maybe refactor this whole spaghetti func?\n    // maybe refactor this whole spaghetti file?\n    // howboudah\n    const groupedWords = groupWordsByCategory(selectedWords).sort((a, b) => b.length - a.length);\n    if (groupedWords.length === 1) {\n      handleCorrectAnswer(groupedWords[0], words);\n      return;\n    }\n    handleWrongAnswer(groupedWords);\n  };\n  return /*#__PURE__*/_jsxDEV(GameBoardContext.Provider, {\n    value: {\n      words,\n      setWords,\n      toggleWordSelect,\n      selectedWords,\n      isIncompleteSelection,\n      checkIsCorrectWords,\n      wrongAnswers,\n      correctWords,\n      wrongAnswerMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoardContextProvider, \"rGLK6x5fZRAi2GySwnf3Y26cgbQ=\");\n_c = GameBoardContextProvider;\nexport const useGameBoardContext = () => {\n  _s2();\n  const context = useContext(GameBoardContext);\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n  return context;\n};\n_s2(useGameBoardContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameBoardContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","getUpdatedWordsList","groupWordsByCategory","jsxDEV","_jsxDEV","MAX_SELECTED_WORDS","MAX_TRIES","DEFAULT_WRONG_ANSWER_MESSAGE","visible","correctAnswers","GameBoardContext","GameBoardContextProvider","children","inputWords","_s","words","setWords","wrongAnswers","setWrongAnswers","correctWords","setCorrectWords","wrongAnswerMessage","setWrongAnswerMessage","updateWords","newWords","updatedWords","selectedWords","filter","isSelected","isIncompleteSelection","length","toggleWordSelect","inputWord","selectedWord","find","word","isGuessedCorrect","updatedWord","map","handleCorrectAnswer","allWords","restWords","updatedCorrectWords","handleShowErrorMessage","mostGuessedCategoryWords","setTimeout","handleWrongAnswer","groupedWords","checkIsCorrectWords","sort","a","b","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGameBoardContext","_s2","context","Error","$RefreshReg$"],"sources":["/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx"],"sourcesContent":["import {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { IGameBoardWord } from \"../types\";\nimport { getUpdatedWordsList, groupWordsByCategory } from \"../lib/lib\";\n\nconst MAX_SELECTED_WORDS = 4;\nconst MAX_TRIES = 3;\n\ninterface IWrongAnswerMessage {\n  visible: boolean;\n  correctAnswers: number;\n}\n\ninterface IContext {\n  words: IGameBoardWord[];\n  setWords: React.Dispatch<React.SetStateAction<IGameBoardWord[]>>;\n  toggleWordSelect: (word: string) => void;\n  selectedWords: IGameBoardWord[];\n  isIncompleteSelection: boolean;\n  checkIsCorrectWords: () => void;\n  wrongAnswers: number;\n  correctWords: IGameBoardWord[];\n  wrongAnswerMessage: IWrongAnswerMessage;\n}\n\n// that's a bad name dont care rollin hard\nconst DEFAULT_WRONG_ANSWER_MESSAGE = {\n  visible: false,\n  correctAnswers: 0,\n};\n\nexport const GameBoardContext = createContext<IContext | null>(null);\n\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords,\n}: {\n  children: ReactNode;\n  inputWords: IGameBoardWord[] | null;\n}) => {\n  const [words, setWords] = useState<IGameBoardWord[]>(inputWords || []);\n  const [wrongAnswers, setWrongAnswers] = useState(1);\n  const [correctWords, setCorrectWords] = useState<IGameBoardWord[]>([]);\n  const [wrongAnswerMessage, setWrongAnswerMessage] =\n    useState<IWrongAnswerMessage>(DEFAULT_WRONG_ANSWER_MESSAGE);\n\n  const updateWords = (newWords: IGameBoardWord[], words: IGameBoardWord[]) => {\n    const updatedWords = getUpdatedWordsList(newWords, words);\n\n    setWords(updatedWords);\n  };\n\n  const selectedWords = words.filter(({ isSelected }) => isSelected);\n\n  const isIncompleteSelection = selectedWords.length < MAX_SELECTED_WORDS;\n\n  const toggleWordSelect = (inputWord: string) => {\n    const selectedWord = words.find(({ word }) => word === inputWord);\n\n    if (!selectedWord) {\n      return;\n    }\n    if (selectedWord.isGuessedCorrect) {\n      return;\n    }\n\n    const updatedWord: IGameBoardWord = {\n      ...selectedWord,\n      isSelected: isIncompleteSelection ? !selectedWord.isSelected : false,\n    };\n\n    setWords(\n      words.map((word) => {\n        return word.word === selectedWord.word ? updatedWord : word;\n      })\n    );\n  };\n\n  const handleCorrectAnswer = (\n    selectedWords: IGameBoardWord[],\n    allWords: IGameBoardWord[]\n  ) => {\n    const restWords = allWords.filter((word) => !word.isSelected);\n    const updatedCorrectWords = selectedWords.map((word) => ({\n      ...word,\n      isGuessedCorrect: true,\n      isSelected: false,\n    }));\n\n    setCorrectWords([...correctWords, ...updatedCorrectWords]);\n    setWords(restWords);\n  };\n\n  // could be made into a toast (not the bread)\n  const handleShowErrorMessage = (\n    mostGuessedCategoryWords: IGameBoardWord[]\n  ) => {\n    setWrongAnswerMessage({\n      visible: true,\n      correctAnswers: mostGuessedCategoryWords.length,\n    });\n    setTimeout(() => {\n      setWrongAnswerMessage(DEFAULT_WRONG_ANSWER_MESSAGE);\n    }, 5000);\n  };\n\n  const handleWrongAnswer = (groupedWords: IGameBoardWord[][]) => {\n    setWrongAnswers(wrongAnswers + 1);\n    handleShowErrorMessage(groupedWords[0]);\n  };\n\n  const checkIsCorrectWords = () => {\n    if (selectedWords.length < 4) {\n      return;\n    }\n    // maybe add the sorting to separate function\n    // maybe refactor this whole spaghetti func?\n    // maybe refactor this whole spaghetti file?\n    // howboudah\n    const groupedWords = groupWordsByCategory(selectedWords).sort(\n      (a, b) => b.length - a.length\n    );\n\n    if (groupedWords.length === 1) {\n      handleCorrectAnswer(groupedWords[0], words);\n      return;\n    }\n\n    handleWrongAnswer(groupedWords);\n  };\n\n  return (\n    <GameBoardContext.Provider\n      value={{\n        words,\n        setWords,\n        toggleWordSelect,\n        selectedWords,\n        isIncompleteSelection,\n        checkIsCorrectWords,\n        wrongAnswers,\n        correctWords,\n        wrongAnswerMessage,\n      }}\n    >\n      {children}\n    </GameBoardContext.Provider>\n  );\n};\n\nexport const useGameBoardContext = () => {\n  const context = useContext(GameBoardContext);\n\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}