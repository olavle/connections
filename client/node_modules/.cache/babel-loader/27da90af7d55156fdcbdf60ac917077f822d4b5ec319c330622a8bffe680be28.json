{"ast":null,"code":"var _jsxFileName = \"/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { getUpdatedWordsList, groupeWordsByCategory } from \"../lib/lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_SELECTED_WORDS = 4;\nexport const GameBoardContext = /*#__PURE__*/createContext(null);\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords\n}) => {\n  _s();\n  const [words, setWords] = useState(inputWords || []);\n  const [wrongAnswers, setWrongAnswers] = useState(1);\n  const updateWords = newWords => {\n    setWords(getUpdatedWordsList(newWords, words));\n  };\n  const unselectWords = newWords => {\n    const unselectedWords = newWords.map(word => ({\n      ...word,\n      isSelected: false\n    }));\n    updateWords(unselectedWords);\n  };\n  const selectedWords = words.filter(({\n    isSelected\n  }) => isSelected);\n  const isIncompleteSelection = selectedWords.length < MAX_SELECTED_WORDS;\n  const toggleWordSelect = inputWord => {\n    const selectedWord = words.find(({\n      word\n    }) => word === inputWord);\n    if (!selectedWord) {\n      throw new Error(\"Selected word has to exist\");\n    }\n    const updatedWord = {\n      ...selectedWord,\n      isSelected: isIncompleteSelection ? !selectedWord.isSelected : false\n    };\n    setWords(words.map(word => {\n      return word.word === selectedWord.word ? updatedWord : word;\n    }));\n  };\n  const checkIsCorrectWords = () => {\n    if (selectedWords.length < 4) {\n      return;\n    }\n    if (wrongAnswers < 3) {\n      const groupedWords = groupeWordsByCategory(selectedWords);\n      if (groupedWords.length === 1) {\n        console.log(\"correct\");\n        const words = groupedWords[0];\n        updateWords(words.map(word => ({\n          ...word,\n          isGuessedCorrect: true,\n          isSelected: false\n        })));\n        unselectWords(words);\n        return;\n      }\n      setWrongAnswers(wrongAnswers + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameBoardContext.Provider, {\n    value: {\n      words,\n      setWords,\n      toggleWordSelect,\n      selectedWords,\n      isIncompleteSelection,\n      checkIsCorrectWords,\n      wrongAnswers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoardContextProvider, \"vl0A1Q6+yjysp/BZrwyDvkrfwas=\");\n_c = GameBoardContextProvider;\nexport const useGameBoardContext = () => {\n  _s2();\n  const context = useContext(GameBoardContext);\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n  return context;\n};\n_s2(useGameBoardContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameBoardContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","getUpdatedWordsList","groupeWordsByCategory","jsxDEV","_jsxDEV","MAX_SELECTED_WORDS","GameBoardContext","GameBoardContextProvider","children","inputWords","_s","words","setWords","wrongAnswers","setWrongAnswers","updateWords","newWords","unselectWords","unselectedWords","map","word","isSelected","selectedWords","filter","isIncompleteSelection","length","toggleWordSelect","inputWord","selectedWord","find","Error","updatedWord","checkIsCorrectWords","groupedWords","console","log","isGuessedCorrect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGameBoardContext","_s2","context","$RefreshReg$"],"sources":["/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx"],"sourcesContent":["import {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { IGameBoardWord } from \"../types\";\nimport * as R from \"ramda\";\nimport { getUpdatedWordsList, groupeWordsByCategory } from \"../lib/lib\";\n\nconst MAX_SELECTED_WORDS = 4 as const;\n\ninterface IContext {\n  words: IGameBoardWord[];\n  setWords: React.Dispatch<React.SetStateAction<IGameBoardWord[]>>;\n  toggleWordSelect: (word: string) => void;\n  selectedWords: IGameBoardWord[];\n  isIncompleteSelection: boolean;\n  checkIsCorrectWords: () => void;\n  wrongAnswers: number;\n}\n\nexport const GameBoardContext = createContext<IContext | null>(null);\n\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords,\n}: {\n  children: ReactNode;\n  inputWords: IGameBoardWord[] | null;\n}) => {\n  const [words, setWords] = useState<IGameBoardWord[]>(inputWords || []);\n  const [wrongAnswers, setWrongAnswers] = useState(1);\n\n  const updateWords = (newWords: IGameBoardWord[]) => {\n    setWords(getUpdatedWordsList(newWords, words));\n  };\n\n  const unselectWords = (newWords: IGameBoardWord[]) => {\n    const unselectedWords = newWords.map((word) => ({\n      ...word,\n      isSelected: false,\n    }));\n    updateWords(unselectedWords);\n  };\n\n  const selectedWords = words.filter(({ isSelected }) => isSelected);\n\n  const isIncompleteSelection = selectedWords.length < MAX_SELECTED_WORDS;\n\n  const toggleWordSelect = (inputWord: string) => {\n    const selectedWord = words.find(({ word }) => word === inputWord);\n\n    if (!selectedWord) {\n      throw new Error(\"Selected word has to exist\");\n    }\n\n    const updatedWord: IGameBoardWord = {\n      ...selectedWord,\n      isSelected: isIncompleteSelection ? !selectedWord.isSelected : false,\n    };\n\n    setWords(\n      words.map((word) => {\n        return word.word === selectedWord.word ? updatedWord : word;\n      })\n    );\n  };\n\n  const checkIsCorrectWords = () => {\n    if (selectedWords.length < 4) {\n      return;\n    }\n    if (wrongAnswers < 3) {\n      const groupedWords = groupeWordsByCategory(selectedWords);\n\n      if (groupedWords.length === 1) {\n        console.log(\"correct\");\n        const words = groupedWords[0];\n\n        updateWords(\n          words.map((word) => ({\n            ...word,\n            isGuessedCorrect: true,\n            isSelected: false,\n          }))\n        );\n\n        unselectWords(words);\n\n        return;\n      }\n\n      setWrongAnswers(wrongAnswers + 1);\n    }\n  };\n\n  return (\n    <GameBoardContext.Provider\n      value={{\n        words,\n        setWords,\n        toggleWordSelect,\n        selectedWords,\n        isIncompleteSelection,\n        checkIsCorrectWords,\n        wrongAnswers,\n      }}\n    >\n      {children}\n    </GameBoardContext.Provider>\n  );\n};\n\nexport const useGameBoardContext = () => {\n  const context = useContext(GameBoardContext);\n\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}