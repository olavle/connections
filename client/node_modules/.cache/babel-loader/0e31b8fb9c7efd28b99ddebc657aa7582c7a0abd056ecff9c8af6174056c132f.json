{"ast":null,"code":"var _jsxFileName = \"/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport * as R from \"ramda\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_SELECTED_WORDS = 4;\nexport const GameBoardContext = /*#__PURE__*/createContext(null);\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords\n}) => {\n  _s();\n  const [words, setWords] = useState(inputWords || []);\n  const selectedWords = words.filter(({\n    isSelected\n  }) => isSelected);\n  const isFullSelection = R.complement(() => selectedWords < 4);\n  const toggleWordSelect = inputWord => {\n    const selectedWord = words.find(({\n      word\n    }) => word === inputWord);\n    if (!selectedWord) {\n      throw new Error(\"Selected word has to exist\");\n    }\n    const editedWord = {\n      ...selectedWord,\n      isSelected: selectedWords.length < MAX_SELECTED_WORDS ? !selectedWord.isSelected : false\n    };\n    setWords(words.map(word => {\n      return word.word === selectedWord.word ? editedWord : word;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(GameBoardContext.Provider, {\n    value: {\n      words,\n      setWords,\n      toggleWordSelect,\n      selectedWords\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoardContextProvider, \"/ruRz87IU3gnnnTiBK9QsS+G+F8=\");\n_c = GameBoardContextProvider;\nexport const useGameBoardContext = () => {\n  _s2();\n  const context = useContext(GameBoardContext);\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n  return context;\n};\n_s2(useGameBoardContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameBoardContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","R","jsxDEV","_jsxDEV","MAX_SELECTED_WORDS","GameBoardContext","GameBoardContextProvider","children","inputWords","_s","words","setWords","selectedWords","filter","isSelected","isFullSelection","complement","toggleWordSelect","inputWord","selectedWord","find","word","Error","editedWord","length","map","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGameBoardContext","_s2","context","$RefreshReg$"],"sources":["/home/eetu/projects/connections/client/src/components/Game/GameBoardContext/index.tsx"],"sourcesContent":["import { ReactNode, createContext, useContext, useState } from \"react\";\nimport { IGameBoardWord } from \"../types\";\nimport * as R from \"ramda\";\n\nconst MAX_SELECTED_WORDS = 4 as const;\n\ninterface IContext {\n  words: IGameBoardWord[];\n  setWords: React.Dispatch<React.SetStateAction<IGameBoardWord[]>>;\n  toggleWordSelect: (word: string) => void;\n  selectedWords: IGameBoardWord[];\n}\n\nexport const GameBoardContext = createContext<IContext | null>(null);\n\nexport const GameBoardContextProvider = ({\n  children,\n  inputWords,\n}: {\n  children: ReactNode;\n  inputWords: IGameBoardWord[] | null;\n}) => {\n  const [words, setWords] = useState<IGameBoardWord[]>(inputWords || []);\n\n  const selectedWords = words.filter(({ isSelected }) => isSelected);\n\n  const isFullSelection = R.complement(() => selectedWords < 4);\n\n  const toggleWordSelect = (inputWord: string) => {\n    const selectedWord = words.find(({ word }) => word === inputWord);\n\n    if (!selectedWord) {\n      throw new Error(\"Selected word has to exist\");\n    }\n\n    const editedWord: IGameBoardWord = {\n      ...selectedWord,\n      isSelected:\n        selectedWords.length < MAX_SELECTED_WORDS\n          ? !selectedWord.isSelected\n          : false,\n    };\n\n    setWords(\n      words.map((word) => {\n        return word.word === selectedWord.word ? editedWord : word;\n      })\n    );\n  };\n\n  return (\n    <GameBoardContext.Provider\n      value={{\n        words,\n        setWords,\n        toggleWordSelect,\n        selectedWords,\n      }}\n    >\n      {children}\n    </GameBoardContext.Provider>\n  );\n};\n\nexport const useGameBoardContext = () => {\n  const context = useContext(GameBoardContext);\n\n  if (!context) {\n    throw new Error(\"context needs provider\");\n  }\n\n  return context;\n};\n"],"mappings":";;;AAAA,SAAoBA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAEtE,OAAO,KAAKC,CAAC,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,kBAAkB,GAAG,CAAU;AASrC,OAAO,MAAMC,gBAAgB,gBAAGP,aAAa,CAAkB,IAAI,CAAC;AAEpE,OAAO,MAAMQ,wBAAwB,GAAGA,CAAC;EACvCC,QAAQ;EACRC;AAIF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAmBQ,UAAU,IAAI,EAAE,CAAC;EAEtE,MAAMI,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC;IAAEC;EAAW,CAAC,KAAKA,UAAU,CAAC;EAElE,MAAMC,eAAe,GAAGd,CAAC,CAACe,UAAU,CAAC,MAAMJ,aAAa,GAAG,CAAC,CAAC;EAE7D,MAAMK,gBAAgB,GAAIC,SAAiB,IAAK;IAC9C,MAAMC,YAAY,GAAGT,KAAK,CAACU,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAKA,IAAI,KAAKH,SAAS,CAAC;IAEjE,IAAI,CAACC,YAAY,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,MAAMC,UAA0B,GAAG;MACjC,GAAGJ,YAAY;MACfL,UAAU,EACRF,aAAa,CAACY,MAAM,GAAGpB,kBAAkB,GACrC,CAACe,YAAY,CAACL,UAAU,GACxB;IACR,CAAC;IAEDH,QAAQ,CACND,KAAK,CAACe,GAAG,CAAEJ,IAAI,IAAK;MAClB,OAAOA,IAAI,CAACA,IAAI,KAAKF,YAAY,CAACE,IAAI,GAAGE,UAAU,GAAGF,IAAI;IAC5D,CAAC,CACH,CAAC;EACH,CAAC;EAED,oBACElB,OAAA,CAACE,gBAAgB,CAACqB,QAAQ;IACxBC,KAAK,EAAE;MACLjB,KAAK;MACLC,QAAQ;MACRM,gBAAgB;MAChBL;IACF,CAAE;IAAAL,QAAA,EAEDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACtB,EAAA,CA/CWH,wBAAwB;AAAA0B,EAAA,GAAxB1B,wBAAwB;AAiDrC,OAAO,MAAM2B,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACvC,MAAMC,OAAO,GAAGpC,UAAU,CAACM,gBAAgB,CAAC;EAE5C,IAAI,CAAC8B,OAAO,EAAE;IACZ,MAAM,IAAIb,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,OAAOa,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,mBAAmB;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}